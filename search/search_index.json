{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the WebMeV User Guide This guide is for users who are new to working with the updated WebMeV application. It is intended for bench biologists and other application users who would like to independently analyze and explore their data. Our goal with this guide is provide some basic orientation and introduce some of the terminology you may see throughout the application. Specific case-studies are provided for a typical analysis of RNA-seq data. If you have ideas or suggestions on how to improve this guide, please let us know! If you are interested in developing WebMeV or contributing workflows, please see the documentation specific to either the frontend (Angular application) or RESTful API backend (a Django-based application).","title":"Home"},{"location":"#welcome-to-the-webmev-user-guide","text":"This guide is for users who are new to working with the updated WebMeV application. It is intended for bench biologists and other application users who would like to independently analyze and explore their data. Our goal with this guide is provide some basic orientation and introduce some of the terminology you may see throughout the application. Specific case-studies are provided for a typical analysis of RNA-seq data. If you have ideas or suggestions on how to improve this guide, please let us know! If you are interested in developing WebMeV or contributing workflows, please see the documentation specific to either the frontend (Angular application) or RESTful API backend (a Django-based application).","title":"Welcome to the WebMeV User Guide"},{"location":"analyses/","text":"Executing analyses By navigating to the \"tools\" tab in the workspace view, user can choose from among various analysis workflows which are grouped in a hierarchy of analysis \"styles\" (e.g. clustering, differential expression, etc.). Note that the analysis options presented do not reflect a particular or recommended analysis workflow-- they are simply all possible options, whether they make sense or not. Indeed, some analysis methods may require other analyses to be run first, creating a dependency. For instance, a gene-set enrichment analysis requires an input file that contains a log fold-change and p-value for each gene. Of course, you may already have already have a file with the proper format, but it is more common to first run a differential expression analysis whose outputs will feed into the GSEA analysis. We typically construct our analyses so that it is relatively easy to pass the outputs of one analysis to the inputs of another. Thus, the outputs of certain analyses may be different than the \"default\" outputs you may get from running the same software on a different system/platform. Naming your analysis Each analysis includes a \"name\" field, which allows you to quickly identify the analysis you have run. For instance, you may wish to run a similar analysis multiple times with different parameters(e.g. a k-means algorithm with a different number of clusters). The naming helps in identifying from among these executed analyses. About analysis inputs All analyses will have one or more inputs which specify the data to use and potentially different parameters for executing the analysis. Often, these inputs are not comprehensive and advanced users or more complex use-cases may require the software to be run outside of WebMeV, such as directly executing a script using R/Bioconductor. However, we generally design the inputs to be flexible and powerful enough to be useful, yet \"safe\". That is, critical options are explained and occasionally protected to avoid making subtle but significant mistakes when specifying input parameters. It is not the goal of WebMeV to provide a \"one stop shop\" for all genomic analyses. Rather, we provide easy and accessible analyses with an eye towards covering the most common cases. One common \"pitfall\" is that you may see an empty field for one of the required analysis inputs. For instance, you can't immediately run a differential gene expression analysis until you have 1) an expression count file and 2) groups of samples (observation sets) to contrast. Therefore, to run a differential expression analysis, one has to first define the two observation sets either by directly annotating the samples (i.e. with an \"annotation file\") or by executing a clustering analysis like PCA. Both of those methods allow you to create new observation sets which will be provided as inputs to the differential expression analysis.","title":"Running analyses"},{"location":"analyses/#executing-analyses","text":"By navigating to the \"tools\" tab in the workspace view, user can choose from among various analysis workflows which are grouped in a hierarchy of analysis \"styles\" (e.g. clustering, differential expression, etc.). Note that the analysis options presented do not reflect a particular or recommended analysis workflow-- they are simply all possible options, whether they make sense or not. Indeed, some analysis methods may require other analyses to be run first, creating a dependency. For instance, a gene-set enrichment analysis requires an input file that contains a log fold-change and p-value for each gene. Of course, you may already have already have a file with the proper format, but it is more common to first run a differential expression analysis whose outputs will feed into the GSEA analysis. We typically construct our analyses so that it is relatively easy to pass the outputs of one analysis to the inputs of another. Thus, the outputs of certain analyses may be different than the \"default\" outputs you may get from running the same software on a different system/platform.","title":"Executing analyses"},{"location":"analyses/#naming-your-analysis","text":"Each analysis includes a \"name\" field, which allows you to quickly identify the analysis you have run. For instance, you may wish to run a similar analysis multiple times with different parameters(e.g. a k-means algorithm with a different number of clusters). The naming helps in identifying from among these executed analyses.","title":"Naming your analysis"},{"location":"analyses/#about-analysis-inputs","text":"All analyses will have one or more inputs which specify the data to use and potentially different parameters for executing the analysis. Often, these inputs are not comprehensive and advanced users or more complex use-cases may require the software to be run outside of WebMeV, such as directly executing a script using R/Bioconductor. However, we generally design the inputs to be flexible and powerful enough to be useful, yet \"safe\". That is, critical options are explained and occasionally protected to avoid making subtle but significant mistakes when specifying input parameters. It is not the goal of WebMeV to provide a \"one stop shop\" for all genomic analyses. Rather, we provide easy and accessible analyses with an eye towards covering the most common cases. One common \"pitfall\" is that you may see an empty field for one of the required analysis inputs. For instance, you can't immediately run a differential gene expression analysis until you have 1) an expression count file and 2) groups of samples (observation sets) to contrast. Therefore, to run a differential expression analysis, one has to first define the two observation sets either by directly annotating the samples (i.e. with an \"annotation file\") or by executing a clustering analysis like PCA. Both of those methods allow you to create new observation sets which will be provided as inputs to the differential expression analysis.","title":"About analysis inputs"},{"location":"export/","text":"Exporting your workspace history To help get an overview of the analyses you have run, we offer a graphical view of your files and analyses under the \"analysis flow\" tab in the workspace. As an example: If you hover over the various icons, you can see the files that were input or output from each analysis task, represented by the \"gear\" icon. In this way, you can see how the various files were created and how everything came together. Clicking on the gear icons will take you to the results tab where you can view the result of that analysis. Finally, by exporting the workflow history, you will have a record of all your analysis versions, parameters, etc. necessary to recreate the same steps on a different dataset. This allows you to run fully reproducible, multi-step workflows at any point in the future. While the exported file is not particularly \"human readable\", it is useful for serving as a kind of receipt or full history of your analysis.","title":"Analysis export"},{"location":"export/#exporting-your-workspace-history","text":"To help get an overview of the analyses you have run, we offer a graphical view of your files and analyses under the \"analysis flow\" tab in the workspace. As an example: If you hover over the various icons, you can see the files that were input or output from each analysis task, represented by the \"gear\" icon. In this way, you can see how the various files were created and how everything came together. Clicking on the gear icons will take you to the results tab where you can view the result of that analysis. Finally, by exporting the workflow history, you will have a record of all your analysis versions, parameters, etc. necessary to recreate the same steps on a different dataset. This allows you to run fully reproducible, multi-step workflows at any point in the future. While the exported file is not particularly \"human readable\", it is useful for serving as a kind of receipt or full history of your analysis.","title":"Exporting your workspace history"},{"location":"file_management/","text":"File management in WebMeV File uploads To upload your data, you can choose to upload data from your local machine or from Dropbox. Local uploads are best for smaller files like prepared count matrices or other files smaller than 500MB. If you attempt to upload files larger than our limit (which may change), the upload will be prevented with a warning message. If you are trying to load sequence data (which can be multiple GB), we only allow uploads via Dropbox. This prevents many large uploads from consuming bandwidth on the WebMeV server. About file names Note that we try to be flexible about how files are named, but we generally advocate for \"simple\" names without spaces and/or special characters other than dashes (\"-\") or underscores (\"_\"). Special characters can cause unexpected issues when attempting to read files and/or use them for analyses. To be clear, we permit files to have spaces within their names, but we ultimately convert the names within WebMeV to avoid any downstream problems. So do not be surprised if you see that your uploaded file has a slightly different name in the file manager. Some pitfalls to avoid: - Avoid files that start with numbers or other characters (e.g. \"2A.tsv\"). We will reject those outright. File \"types\" and extensions To run analysis operations, we need to be able to parse the input files. To do that in a predictable and reproducible way, we need to know what types of files we are dealing with. Each analysis type expects files in a particular format and we can better control for errors if we assign \"types\" to each file and validate their format before attempting to use them in any analyses. After uploading your file(s), the file manager will prompt you to select the file type. Upon selection, WebMeV will attempt to parse and validate your file to confirm that it can be used for downstream analyses. The file manager page has a guide to help understand each file type and what they mean, but you can also see these types here . It is not feasible to validate large sequencing files, so certain file types bypass any pre-validation. The file extension (e.g. \"tsv\" in \"myFile.tsv\") serves as a clue for the format of the data and how we attempt to parse it. We note that a file's format is different than its \"type\"; whereas the \"type\" refers to what it represents (e.g. an expression matrix, a BED file, etc.), the file's format refers to how the data is stored. An example is the extension of \"csv\" ( myFile.csv ), which signals that each column is separated/delimited with a comma. There is no \"official\" guide to this, but we follow conventional nomenclature. See here for a list of the formats/extensions we support. If the format does not match the extension (e.g. a tab-delimited file named as \"myFile.csv\"), this will often result in parsing errors and warnings, but this is not always the case. Thus, it is important that you preview your files (if available) in WebMeV to see that they have been interpreted correctly. Finally, we make note that some common bioinformatics file types implicitly enforce a particular format and extension. An example is a BED-format file. These are required to be saved in a tab-delimited format and we further require that the file extension is set to \"bed\" (e.g. myBedFile.bed). Again, these formats are simply conventions to simplify bioinformatics workflows and communication, but we strictly enforce this within WebMeV. Note that we attempt to provide useful instructions if your file does not validate, but we cannot anticipate the many things that can go wrong in formatting files. If you believe there is an error, please let us know! Previewing files To check that your file was uploaded and parsed correctly, you can click on the \"preview\" icon (the eyeball) to see a portion of your file. If, for instance, your count matrix does not appear as a \"sensible\" looking table of numbers, then this is a clue that something has gone wrong. Generally, plain-text files are best, but we also accept Excel files. Note, however, that auto-formatting within Excel has been implicated in many errors in the bioinformatics field (https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-5-80) Removing files To preserve the fidelity of your workspace, we do not allow you to delete files which are part of a workspace. To fully delete a file, you must first remove it from all workspaces. A list of the current workspaces is provided in the file manager table. One important caveat of all this is that you cannot delete a file which has been used for an analysis . This includes inputs and outputs of analyses. For example, if you used a file containing differential expression results to execute a GSEA pathway analysis, you can't remove that input file. To do so would \"break\" your analysis flow since we would no longer have any record of a file required to fully recreate your analysis workflow. Hence, you can only delete files which have not been used in any workspaces and further are not attached to any workspaces. Renaming files By default, many analyses will name your files automatically. If you wish to simplify these names, you may rename them in the file manager/editor. It is up to you to keep these names distinct and memorable. The analyses track these files by unique identifiers, so the human-assigned name is primarily used as a cue for the user. Note that the file extension (e.g. \"tsv\" in \"myfile.tsv\") is often used as a \"clue\" for how to parse the file. Changing that extension can lead to unexpected behavior, so we advise against altering the extension. Generally, we try to catch these sorts of errors, but it is a challenge to anticipate the many things that can go wrong.","title":"Managing files"},{"location":"file_management/#file-management-in-webmev","text":"","title":"File management in WebMeV"},{"location":"file_management/#file-uploads","text":"To upload your data, you can choose to upload data from your local machine or from Dropbox. Local uploads are best for smaller files like prepared count matrices or other files smaller than 500MB. If you attempt to upload files larger than our limit (which may change), the upload will be prevented with a warning message. If you are trying to load sequence data (which can be multiple GB), we only allow uploads via Dropbox. This prevents many large uploads from consuming bandwidth on the WebMeV server. About file names Note that we try to be flexible about how files are named, but we generally advocate for \"simple\" names without spaces and/or special characters other than dashes (\"-\") or underscores (\"_\"). Special characters can cause unexpected issues when attempting to read files and/or use them for analyses. To be clear, we permit files to have spaces within their names, but we ultimately convert the names within WebMeV to avoid any downstream problems. So do not be surprised if you see that your uploaded file has a slightly different name in the file manager. Some pitfalls to avoid: - Avoid files that start with numbers or other characters (e.g. \"2A.tsv\"). We will reject those outright.","title":"File uploads"},{"location":"file_management/#file-types-and-extensions","text":"To run analysis operations, we need to be able to parse the input files. To do that in a predictable and reproducible way, we need to know what types of files we are dealing with. Each analysis type expects files in a particular format and we can better control for errors if we assign \"types\" to each file and validate their format before attempting to use them in any analyses. After uploading your file(s), the file manager will prompt you to select the file type. Upon selection, WebMeV will attempt to parse and validate your file to confirm that it can be used for downstream analyses. The file manager page has a guide to help understand each file type and what they mean, but you can also see these types here . It is not feasible to validate large sequencing files, so certain file types bypass any pre-validation. The file extension (e.g. \"tsv\" in \"myFile.tsv\") serves as a clue for the format of the data and how we attempt to parse it. We note that a file's format is different than its \"type\"; whereas the \"type\" refers to what it represents (e.g. an expression matrix, a BED file, etc.), the file's format refers to how the data is stored. An example is the extension of \"csv\" ( myFile.csv ), which signals that each column is separated/delimited with a comma. There is no \"official\" guide to this, but we follow conventional nomenclature. See here for a list of the formats/extensions we support. If the format does not match the extension (e.g. a tab-delimited file named as \"myFile.csv\"), this will often result in parsing errors and warnings, but this is not always the case. Thus, it is important that you preview your files (if available) in WebMeV to see that they have been interpreted correctly. Finally, we make note that some common bioinformatics file types implicitly enforce a particular format and extension. An example is a BED-format file. These are required to be saved in a tab-delimited format and we further require that the file extension is set to \"bed\" (e.g. myBedFile.bed). Again, these formats are simply conventions to simplify bioinformatics workflows and communication, but we strictly enforce this within WebMeV. Note that we attempt to provide useful instructions if your file does not validate, but we cannot anticipate the many things that can go wrong in formatting files. If you believe there is an error, please let us know!","title":"File \"types\" and extensions"},{"location":"file_management/#previewing-files","text":"To check that your file was uploaded and parsed correctly, you can click on the \"preview\" icon (the eyeball) to see a portion of your file. If, for instance, your count matrix does not appear as a \"sensible\" looking table of numbers, then this is a clue that something has gone wrong. Generally, plain-text files are best, but we also accept Excel files. Note, however, that auto-formatting within Excel has been implicated in many errors in the bioinformatics field (https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-5-80)","title":"Previewing files"},{"location":"file_management/#removing-files","text":"To preserve the fidelity of your workspace, we do not allow you to delete files which are part of a workspace. To fully delete a file, you must first remove it from all workspaces. A list of the current workspaces is provided in the file manager table. One important caveat of all this is that you cannot delete a file which has been used for an analysis . This includes inputs and outputs of analyses. For example, if you used a file containing differential expression results to execute a GSEA pathway analysis, you can't remove that input file. To do so would \"break\" your analysis flow since we would no longer have any record of a file required to fully recreate your analysis workflow. Hence, you can only delete files which have not been used in any workspaces and further are not attached to any workspaces.","title":"Removing files"},{"location":"file_management/#renaming-files","text":"By default, many analyses will name your files automatically. If you wish to simplify these names, you may rename them in the file manager/editor. It is up to you to keep these names distinct and memorable. The analyses track these files by unique identifiers, so the human-assigned name is primarily used as a cue for the user. Note that the file extension (e.g. \"tsv\" in \"myfile.tsv\") is often used as a \"clue\" for how to parse the file. Changing that extension can lead to unexpected behavior, so we advise against altering the extension. Generally, we try to catch these sorts of errors, but it is a challenge to anticipate the many things that can go wrong.","title":"Renaming files"},{"location":"file_types/","text":"File types and formats File types As mentioned elsewhere, file types dictate what the file represents, not how it's stored (e.g. comma-separated values, tab-separated values). Each of these file types can be stored in multiple formats. Table types A numeric table is a table of where all the entries are numbers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank (as shown below). Example: Sample_A Sample_B ... Sample_T geneA 2.1 5.2 ... 54 geneB 101 102 ... 8.3 geneC 56 51.1 ... 56 An integer table is a table of where all the entries are integers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank as shown below. Example: Sample_A Sample_B ... Sample_T geneA 2 5 ... 54 geneB 101 102 ... 8 geneC 56 51 ... 56 A RNA-seq count matrix is a table of where all the entries are integers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank. This type is identical to the integer matrix above, but we have this type so it's more obvious what the data represents. An expression matrix is a table where all the entries are numbers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank. This is the same as the numeric matrix listed above, but we have this type so it's more obvious what the data represents. Numeric tables can hold many types of data, but the intention of the expression matrix is to hold data about gene/transcript expression. A feature table describes or annotates the \"features\" of your data. In the genomics context, one example of a feature is a gene. Therefore, you could use this table to give additional information about each gene, such as alternative symbols, oncogene status, or similar. Each row contains information about a single gene and each column gives a different item of information about that gene. Note, however, that this concept is completely general and not restricted to information about genes or transcripts. Another example of a feature table is the output of a differential gene expression analysis. In that context, each row holds information about the statistics of differential expression, such as the log-fold change and p-value.. mean logFC ... pvalue geneA 200.2 0.2 ... 0.32 geneB 1001.1 5.2 ... 0.0001 geneC 10.2 -3.2 ... 0.03 An annotation table is used to add metadata to your samples. The first column has the sample name and the remaining columns contain metadata about each sample (for instance, experimental group, treatment, or similar. phenotype batch sample_A WT 1 sample_B KO 1 sampleC WT 2 A BED file is a three-column BED-format file which is used to give genomic coordinates or regions. These can represent regions of interest (e.g. transcription-factor binding sites) or simply the genomic coordinates of a gene. \"Expanded\" BED formats can have additional columns and those are permitted . However, at this time, we only read the first three columns which gives the chromosome/contig, the start position, and the end position. BED-format does not expect a column header. chr1 2000 2305 chr2 4000 4502 chrX 200 205 Sequence-based formats Most often, sequence-based files are reserved for the larger, more computationally intensive aspects of WebMeV. Unfortunately, due to their size, dynamic interaction and data exploration with such files is not feasible and hence most users will not perform analyses or workflows that involve raw sequence data. However, since we work with these types of files, we admit them to be uploaded to WebMeV. However, we do not provide error-checking or validation on these files due to their size and overhead. Fasta represents a FASTA-format sequence file. https://en.wikipedia.org/wiki/FASTA_format Fastq represents a FASTQ-format sequence files. The is the most common format used for sequencing experiments. Sequencing providers will typically deliver FASTQ-format files in addition to other files. More info: https://en.wikipedia.org/wiki/FASTQ_format An alignment (SAM/BAM) represents a BAM- or SAM-format aligned sequence file. Typically the output of an alignment process such as an alignment of sequencing reads against a reference genome/transcriptome. Other formats exist, but this is the most common format you will see. Full file specification: http://samtools.sourceforge.net/SAM1.pdf JSON format JSON-format file is used for data that is not easily represented in a table-based format. Typically not a file you will work with directly, but is a file format that is convenient for use within WebMeV. Can hold multiple data types and represent arbitrary relationships. https://en.wikipedia.org/wiki/JSON General Format A general file is typically used to denote an unspecified type. This is rarely used as it represents data that cannot be predictably validated. It is quite rare that an analysis or workflow will take arbitrary data as input, so you will not see this format used very often. Extensions and file formats As mentioned above, the file types indicate what the data represents (e.g. gene expression), but the file format indicates how it is stored. The file \"extension\" (e.g. the \"csv\" part of \"myFile.csv\") is used as a signal or cue for the storage format and how it should be parsed when being read. However, this is merely a common practice/convention and there is nothing that prevents you from saving files in a format that is incompatible with the file extension we expect. If this happens (e.g. a comma-delimited file stored as \"myfile.tsv\"), then an error will typically be raised when parsing. For instance, if a CSV file is saved with a \"tsv\" extension then the software will scan each line expecting to split your columns based on \"tab\" characters. Since it will not find any tab characters in a comma-delimited file, it will fail to split the lines and it will parse the file as if it contains a single column of \"junk\". As a result, the file parsing will likely fail and you will be alerted to this. For table-based data, we permit several storage formats including CSV (comma-separated values), TSV (tab-separated values), and Excel-based formats (xls/xlsx). There are other table-based formats for file types which are conventional/common types in the bioinformatics field. The file extensions are case-insensitive, so \"tsv\", \"Tsv\", \"TSV\", etc. are all acceptable. We currently accept: Tab-delimited formats: \"tsv\" Comma-delimited formats: \"csv\" Excel formats: \"xls\", \"xlsx\". Note that Excel format can have the potential to \"corrupt\" some gene names. For example, the \"Sept1\" gene is typically interpreted and replaced as \"September 1\" (a date) if you import genomic data into Excel. For BED and VCF (for variant data: https://en.wikipedia.org/wiki/Variant_Call_Format ) formats, we expect their canonical/common extensions of \"bed\" or \"vcf\", respectively.","title":"File types and formats"},{"location":"file_types/#file-types-and-formats","text":"","title":"File types and formats"},{"location":"file_types/#file-types","text":"As mentioned elsewhere, file types dictate what the file represents, not how it's stored (e.g. comma-separated values, tab-separated values). Each of these file types can be stored in multiple formats.","title":"File types"},{"location":"file_types/#table-types","text":"A numeric table is a table of where all the entries are numbers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank (as shown below). Example: Sample_A Sample_B ... Sample_T geneA 2.1 5.2 ... 54 geneB 101 102 ... 8.3 geneC 56 51.1 ... 56 An integer table is a table of where all the entries are integers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank as shown below. Example: Sample_A Sample_B ... Sample_T geneA 2 5 ... 54 geneB 101 102 ... 8 geneC 56 51 ... 56 A RNA-seq count matrix is a table of where all the entries are integers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank. This type is identical to the integer matrix above, but we have this type so it's more obvious what the data represents. An expression matrix is a table where all the entries are numbers except the first column (which names the rows) and the first line (which gives the column names). The cell at the first row and column may be left blank. This is the same as the numeric matrix listed above, but we have this type so it's more obvious what the data represents. Numeric tables can hold many types of data, but the intention of the expression matrix is to hold data about gene/transcript expression. A feature table describes or annotates the \"features\" of your data. In the genomics context, one example of a feature is a gene. Therefore, you could use this table to give additional information about each gene, such as alternative symbols, oncogene status, or similar. Each row contains information about a single gene and each column gives a different item of information about that gene. Note, however, that this concept is completely general and not restricted to information about genes or transcripts. Another example of a feature table is the output of a differential gene expression analysis. In that context, each row holds information about the statistics of differential expression, such as the log-fold change and p-value.. mean logFC ... pvalue geneA 200.2 0.2 ... 0.32 geneB 1001.1 5.2 ... 0.0001 geneC 10.2 -3.2 ... 0.03 An annotation table is used to add metadata to your samples. The first column has the sample name and the remaining columns contain metadata about each sample (for instance, experimental group, treatment, or similar. phenotype batch sample_A WT 1 sample_B KO 1 sampleC WT 2 A BED file is a three-column BED-format file which is used to give genomic coordinates or regions. These can represent regions of interest (e.g. transcription-factor binding sites) or simply the genomic coordinates of a gene. \"Expanded\" BED formats can have additional columns and those are permitted . However, at this time, we only read the first three columns which gives the chromosome/contig, the start position, and the end position. BED-format does not expect a column header. chr1 2000 2305 chr2 4000 4502 chrX 200 205","title":"Table types"},{"location":"file_types/#sequence-based-formats","text":"Most often, sequence-based files are reserved for the larger, more computationally intensive aspects of WebMeV. Unfortunately, due to their size, dynamic interaction and data exploration with such files is not feasible and hence most users will not perform analyses or workflows that involve raw sequence data. However, since we work with these types of files, we admit them to be uploaded to WebMeV. However, we do not provide error-checking or validation on these files due to their size and overhead. Fasta represents a FASTA-format sequence file. https://en.wikipedia.org/wiki/FASTA_format Fastq represents a FASTQ-format sequence files. The is the most common format used for sequencing experiments. Sequencing providers will typically deliver FASTQ-format files in addition to other files. More info: https://en.wikipedia.org/wiki/FASTQ_format An alignment (SAM/BAM) represents a BAM- or SAM-format aligned sequence file. Typically the output of an alignment process such as an alignment of sequencing reads against a reference genome/transcriptome. Other formats exist, but this is the most common format you will see. Full file specification: http://samtools.sourceforge.net/SAM1.pdf","title":"Sequence-based formats"},{"location":"file_types/#json-format","text":"JSON-format file is used for data that is not easily represented in a table-based format. Typically not a file you will work with directly, but is a file format that is convenient for use within WebMeV. Can hold multiple data types and represent arbitrary relationships. https://en.wikipedia.org/wiki/JSON","title":"JSON format"},{"location":"file_types/#general-format","text":"A general file is typically used to denote an unspecified type. This is rarely used as it represents data that cannot be predictably validated. It is quite rare that an analysis or workflow will take arbitrary data as input, so you will not see this format used very often.","title":"General Format"},{"location":"file_types/#extensions-and-file-formats","text":"As mentioned above, the file types indicate what the data represents (e.g. gene expression), but the file format indicates how it is stored. The file \"extension\" (e.g. the \"csv\" part of \"myFile.csv\") is used as a signal or cue for the storage format and how it should be parsed when being read. However, this is merely a common practice/convention and there is nothing that prevents you from saving files in a format that is incompatible with the file extension we expect. If this happens (e.g. a comma-delimited file stored as \"myfile.tsv\"), then an error will typically be raised when parsing. For instance, if a CSV file is saved with a \"tsv\" extension then the software will scan each line expecting to split your columns based on \"tab\" characters. Since it will not find any tab characters in a comma-delimited file, it will fail to split the lines and it will parse the file as if it contains a single column of \"junk\". As a result, the file parsing will likely fail and you will be alerted to this. For table-based data, we permit several storage formats including CSV (comma-separated values), TSV (tab-separated values), and Excel-based formats (xls/xlsx). There are other table-based formats for file types which are conventional/common types in the bioinformatics field. The file extensions are case-insensitive, so \"tsv\", \"Tsv\", \"TSV\", etc. are all acceptable. We currently accept: Tab-delimited formats: \"tsv\" Comma-delimited formats: \"csv\" Excel formats: \"xls\", \"xlsx\". Note that Excel format can have the potential to \"corrupt\" some gene names. For example, the \"Sept1\" gene is typically interpreted and replaced as \"September 1\" (a date) if you import genomic data into Excel. For BED and VCF (for variant data: https://en.wikipedia.org/wiki/Variant_Call_Format ) formats, we expect their canonical/common extensions of \"bed\" or \"vcf\", respectively.","title":"Extensions and file formats"},{"location":"quickstart/","text":"WebMeV Quickstart Guide This quickstart is not meant to be comprehensive, but simply to provide a brief introduction for those who would like to get started as soon as possible. For more details, see the corresponding pages in the side menu. Login To better understand WebMeV usage and provide better security, we require that users register with WebMeV. You can do this using either your own email address or by using a Google account. If you register via email, we will send you a link to validate your account. Uploading files To run an analysis, you obviously need to have data to work with. You may either upload data from your local machine or by using our Dropbox uploader. If available, you can also create data from a number of public data sources we provide. Assigning file \"types\" We need to know what types of files we are dealing with. Each analysis type expects files in a particular format and we can better control for errors if we assign \"types\" to each file and validate their format before using them in any analyses. After uploading your file(s), the file manager will prompt you to select the file type. Upon selection, WebMeV will attempt to parse and validate your file to confirm that it can be used for downstream analyses. The file manager page has a guide to help understand each file type, but you can also see these types here . Note that we attempt to provide useful instructions if your file does not validate, but we cannot anticipate the many things that can go wrong in formatting files. If you believe there is an error, please let us know! Creating a workspace To help with managing and organizing multiple types of analyses, we allow users to create \"workspaces\". All your analysis is performed within the context of a workspace. While you are not required to use more than one workspace, we encourage users to separate different types of analyses if they concern fundamentally different data. For example, one workspace might contain analyses related to an RNA-seq experiment performed on a cell-line while another workspace might contain analyses pertaining to an unrelated patient-derived xenograft mouse experiment. Adding data to your workspace Workspaces are initially empty. You can then \"import\" files to one or more workspaces to use in analysis. Even if you have uploaded all your files, you cannot use them until they have been validated and added to your workspace. Running analyses Under the \"tools\" tab, you will find a list of available analyses grouped by their general \"type\". For instance, the differential expression menu contains several common packages for performing a differential expression analysis. Common pitfall- no options for a given input Each analysis input is restricted to an expected type and the available options are based on that expectation. For example, if we are attempting to run a differential expression analysis, one required input is a \"count matrix\" (also called an expression matrix). Accordingly, the options for such an input will be populated with a list of files in your workspace which have a \"file type\" appropriate for this input. If you do not see any input options for a given field, you likely have to perform another action first. For instance, to execute a pathway analysis (e.g. GSEA), you first need an ordered list of genes (typically ranked by a measure of their differential expression). If you attempt to run a GSEA analysis right away, you will most likely notice that the dropdown menu for the input file is empty. Hence, you either need to first upload a file with the proper format or (most likely) run a differential expression analysis first. Similarly, some analyses (such as differential expression analysis) require you to provide two groups of samples/observations to compare. Therefore, you must first create these two groups, either through a clustering analysis or by annotating your samples (e.g. telling WebMeV which samples are \"experimental\" and which should be considered as a \"control\" group). Viewing results After requesting an analysis, your job will be queued and executed in a (hopefully!) timely manner. Depending on the size of your dataset and the requested analysis, this can be relatively quick (e.g. under 10 seconds) or take significantly longer (minutes, hours). WebMeV will periodically check the state of your job and report back with the status (i.e. running, finishing, preparing visualization). Unfortunately, we cannot provide fine-grained details on the progress (such as \"75% complete\"). Once the job is complete, you can view the results by finding your \"executed analysis\" in the results menu. Most result pages will provide interactive visualizations or plots that will allow you to define interesting groups of samples, genes, and perform other actions. Most figures can be exported for download.","title":"Quickstart"},{"location":"quickstart/#webmev-quickstart-guide","text":"This quickstart is not meant to be comprehensive, but simply to provide a brief introduction for those who would like to get started as soon as possible. For more details, see the corresponding pages in the side menu.","title":"WebMeV Quickstart Guide"},{"location":"quickstart/#login","text":"To better understand WebMeV usage and provide better security, we require that users register with WebMeV. You can do this using either your own email address or by using a Google account. If you register via email, we will send you a link to validate your account.","title":"Login"},{"location":"quickstart/#uploading-files","text":"To run an analysis, you obviously need to have data to work with. You may either upload data from your local machine or by using our Dropbox uploader. If available, you can also create data from a number of public data sources we provide.","title":"Uploading files"},{"location":"quickstart/#assigning-file-types","text":"We need to know what types of files we are dealing with. Each analysis type expects files in a particular format and we can better control for errors if we assign \"types\" to each file and validate their format before using them in any analyses. After uploading your file(s), the file manager will prompt you to select the file type. Upon selection, WebMeV will attempt to parse and validate your file to confirm that it can be used for downstream analyses. The file manager page has a guide to help understand each file type, but you can also see these types here . Note that we attempt to provide useful instructions if your file does not validate, but we cannot anticipate the many things that can go wrong in formatting files. If you believe there is an error, please let us know!","title":"Assigning file \"types\""},{"location":"quickstart/#creating-a-workspace","text":"To help with managing and organizing multiple types of analyses, we allow users to create \"workspaces\". All your analysis is performed within the context of a workspace. While you are not required to use more than one workspace, we encourage users to separate different types of analyses if they concern fundamentally different data. For example, one workspace might contain analyses related to an RNA-seq experiment performed on a cell-line while another workspace might contain analyses pertaining to an unrelated patient-derived xenograft mouse experiment.","title":"Creating a workspace"},{"location":"quickstart/#adding-data-to-your-workspace","text":"Workspaces are initially empty. You can then \"import\" files to one or more workspaces to use in analysis. Even if you have uploaded all your files, you cannot use them until they have been validated and added to your workspace.","title":"Adding data to your workspace"},{"location":"quickstart/#running-analyses","text":"Under the \"tools\" tab, you will find a list of available analyses grouped by their general \"type\". For instance, the differential expression menu contains several common packages for performing a differential expression analysis. Common pitfall- no options for a given input Each analysis input is restricted to an expected type and the available options are based on that expectation. For example, if we are attempting to run a differential expression analysis, one required input is a \"count matrix\" (also called an expression matrix). Accordingly, the options for such an input will be populated with a list of files in your workspace which have a \"file type\" appropriate for this input. If you do not see any input options for a given field, you likely have to perform another action first. For instance, to execute a pathway analysis (e.g. GSEA), you first need an ordered list of genes (typically ranked by a measure of their differential expression). If you attempt to run a GSEA analysis right away, you will most likely notice that the dropdown menu for the input file is empty. Hence, you either need to first upload a file with the proper format or (most likely) run a differential expression analysis first. Similarly, some analyses (such as differential expression analysis) require you to provide two groups of samples/observations to compare. Therefore, you must first create these two groups, either through a clustering analysis or by annotating your samples (e.g. telling WebMeV which samples are \"experimental\" and which should be considered as a \"control\" group).","title":"Running analyses"},{"location":"quickstart/#viewing-results","text":"After requesting an analysis, your job will be queued and executed in a (hopefully!) timely manner. Depending on the size of your dataset and the requested analysis, this can be relatively quick (e.g. under 10 seconds) or take significantly longer (minutes, hours). WebMeV will periodically check the state of your job and report back with the status (i.e. running, finishing, preparing visualization). Unfortunately, we cannot provide fine-grained details on the progress (such as \"75% complete\"). Once the job is complete, you can view the results by finding your \"executed analysis\" in the results menu. Most result pages will provide interactive visualizations or plots that will allow you to define interesting groups of samples, genes, and perform other actions. Most figures can be exported for download.","title":"Viewing results"},{"location":"reproducibility/","text":"Ensuring reproducible workflows WebMeV was designed to be a platform that easily supports reproducibility of analysis workflows. Each type of analysis used in WebMeV is supported by a GitHub repository that has all of the necessary software and infrastructure code. These can be found at the WebMeV GitHub project: https://github.com/web-mev . For example, the DESeq2 differential expression process can be found at https://github.com/web-mev/deseq2 . Depending on the computational resources needed for a particular workflow, the jobs can be executed in one of several manners. This architecture choice enables WebMeV users to easily reference the repository which will be able to completely reproduce every aspect of a computational analysis/process independent of WebMeV . This makes the analysis outputs of workflows amenable for use in publications where authors can simply reference the appropriate repository. Additionally, the same workflows can be recalled at any time if further data is acquired. The local Docker-based job runner Computational environments (operating system, libraries, and software installations) are controlled through containerization technologies such as Docker. Docker images are saved to a public Dockerhub repository which allows users to simply pull the exact version of the container image. The software used to run the analysis is loaded into the container and one only needs to provide the same inputs to ensure a completely reproducible analysis workflow. These worklows can be executed on any system with Docker installed. The remote Cromwell-based job runner. Workflows that require more significant computational time or resources are run via the remote Cromwell job runner. While not consequential to the WebMeV user, Cromwell handles starting, managing, and stopping new computational nodes (cloud-based machines). Note that all the computation still happens in Docker containers, but these are simply run on different machines than the WebMeV server. The workflows themselves are prescribed using Workflow Definition Language (WDL) which dictates the various steps of a potentially complex, multi-step analysis process. While not as straightforward as a local, Docker-based process, all the elements of the process are there for complete reproducibility. One has to either \"extract\" the individual steps or setup their own Cromwell server. Regardless, all workflow elements are self-contained in the repository.","title":"Reproducibility"},{"location":"reproducibility/#ensuring-reproducible-workflows","text":"WebMeV was designed to be a platform that easily supports reproducibility of analysis workflows. Each type of analysis used in WebMeV is supported by a GitHub repository that has all of the necessary software and infrastructure code. These can be found at the WebMeV GitHub project: https://github.com/web-mev . For example, the DESeq2 differential expression process can be found at https://github.com/web-mev/deseq2 . Depending on the computational resources needed for a particular workflow, the jobs can be executed in one of several manners. This architecture choice enables WebMeV users to easily reference the repository which will be able to completely reproduce every aspect of a computational analysis/process independent of WebMeV . This makes the analysis outputs of workflows amenable for use in publications where authors can simply reference the appropriate repository. Additionally, the same workflows can be recalled at any time if further data is acquired.","title":"Ensuring reproducible workflows"},{"location":"reproducibility/#the-local-docker-based-job-runner","text":"Computational environments (operating system, libraries, and software installations) are controlled through containerization technologies such as Docker. Docker images are saved to a public Dockerhub repository which allows users to simply pull the exact version of the container image. The software used to run the analysis is loaded into the container and one only needs to provide the same inputs to ensure a completely reproducible analysis workflow. These worklows can be executed on any system with Docker installed.","title":"The local Docker-based job runner"},{"location":"reproducibility/#the-remote-cromwell-based-job-runner","text":"Workflows that require more significant computational time or resources are run via the remote Cromwell job runner. While not consequential to the WebMeV user, Cromwell handles starting, managing, and stopping new computational nodes (cloud-based machines). Note that all the computation still happens in Docker containers, but these are simply run on different machines than the WebMeV server. The workflows themselves are prescribed using Workflow Definition Language (WDL) which dictates the various steps of a potentially complex, multi-step analysis process. While not as straightforward as a local, Docker-based process, all the elements of the process are there for complete reproducibility. One has to either \"extract\" the individual steps or setup their own Cromwell server. Regardless, all workflow elements are self-contained in the repository.","title":"The remote Cromwell-based job runner."},{"location":"rnaseq_case_study/","text":"Case study: RNA-Seq Importing files When we initially log-in, the file browser shows that you have no files: Upload from your local machine. Here we show the upload of the RNA-seq counts file, which looks like: Sample_A Sample_B ... Sample_T geneA 2 5 ... 54 geneB 101 102 ... 8 ... 56 51 ... 56 In addition to the prepared RNA-seq counts, we also have an \"annotation file\". This file gives sample metadata, or data about the samples themselves . In our example, the annotation file tells us that some of the samples were derived from cultures of monocytes while others came from CD4 cells. Additionally, it lists the sequencing \"batch\". We don't use that in this walkthrough, but one could use that variable to assess if there were any noticeable batch effects that we should adjust for. sample_id cell_type sequencing_run sample_D Monocytes run1 sample_C Monocytes run1 sample_S CD4 run1 ... ... ... sampleT CD4 run1 Defining file types After upload, we need to tell WebMeV what types of files these are. Note that the file name shows up in red text to alert us about this. We choose \"RNA-seq count matrix\" and \"Annotation file\" After setting the file types, WebMeV will attempt to parse and validate. If successful, you will see that the files are \"active\" without any warnings. As a double-check, we click on the \"eyeball\" icon to view a preview. Everything looks good. Generally, if something was incorrectly formatted, then the file will not pass validation. Creating a new workspace Now that the files are uploaded and ready, we switch to the \"workspaces\" tab. Initially this is empty. Clicking the button opens a dialog where we enter the name of the workspace. Choose a simple, descriptive name (\"mev-demo\" in this case). Then click on the link to enter this new workspace Adding data to the workspace After creating the workspace and clicking on the link, the workspace view is opened. Initially the workspace is empty. Note the empty table in the file browser. Your uploaded files still exist, but the table is empty since they have not been added to this particular workspace. Clicking on the \"add local data\" from above, we can select which files we want to import into this workspace. Running analyses Navigate to the \"tools\" tab and look at the list of options for analysis tools. Below, we show how to initiate a principal component analysis (PCA). Next to each input field, the question mark icon will provide help and explanation for that analysis input. For a PCA analysis, we only require the input RNA-seq count matrix. There is also an optional input for executing the PCA on a subset of samples, but we leave that blank. As mentioned in the how-to guide, inputs that correspond to input files will be populated with all available files that match the expected type. Sometimes the input does not make sense for a given analysis, so the presence of a particular file as an input option does not mean that it is necessarily appropriate for that analysis . After filling everything out, we click \"Run\" and wait... Exploring the PCA output After the PCA completes, the interface will update to show the PCA projection plot. This is a \"simplified\" 2-dimensional representation of your data. Typically, samples with similar expression profiles or phenotypes will cluster together. Each data point represents a single sample. From the plot, we can see two general clusters- one on the left side of the plot and the other on the right. Since WebMeV is interactive, we can now use this PCA clustering to begin investigating these samples. We click the \"select points\" button (shown in light blue) to toggle the \"drag and draw\" functionality. With this, we are able to select the points in each cluster. Below, we show only a single cluster, but we do this for both the left and right clusters. Note that when the samples are selected, you are told that you have selected \"sample_A\", \"sample_B\", and so on. We then click the \"Save as a sample set\" button, which opens up a popup dialog (see below). That popup allows us to define a custom \"observation set\" and choose a color to represent that group of samples. Note that in WebMeV's terminology an \"observation\" is a sample and a \"feature\" is a gene. We use those more general terms to avoid confusion in situations where the data does not correspond to biological samples or specifically genes. We do this for both clusters and name them \"setA\" and \"setB\". If you navigate to the \"metadata\" tab, you can see that the table now shows both of these: You may now click on one of the set to see the samples corresponding to the set. Incorporating annotations Recall that due to the sequencing experiment, we had prior knowledge of each cell type (monocytes, CD4). Given what we are dealing with two distinct cell types, we might expect that the two clusters we identified in the PCA directly correspond with these. If you go to the \"metadata\" tab and click on the \"incorporate annotations\" file, you will be presented with a popup where you may select from any annotation files that you have in your workspace. If you have not uploaded and set any files of this type, then this option will not be enabled. In our annotation file, we had two colums named \"cell_type\" and \"sequencing_run\". For the moment, we select \"cell_type\" as the annotation attribute since we are interested in how the PCA clusters correspond to the biological annotations. We can then choose to incoporate the information from this column. We select all to bring in all the information about cell types. After clicking \"add\" above, we now see that two new \"observation sets\" were created-- one for the monocytes and one for the CD4 cells, each with 10 samples in each. If we now select the \"visualization\" view to the top-right of the table, we can see a graphic representation of how the samples fall into the various groups. We immediately see that the samples in setA are almost equivalent to the samples annotated as monocytes. However , we see that \"sample_F\" does not seem to agree. Perhaps there was an error in your annotation file?? According to the PCA, sample_F showed an expression pattern more similar to your CD4 samples since it clustered with the other samples which all matched the CD4 annotation. Note that errors in annotations are more common than you think and it is important to do this type of investigation/QC. In public datasets, running a PCA using chrX/chrY expression can sometimes reveal expression patterns that are incongruous with the clinical annotation for sex. Running a differential expression analysis We next run a differential expression analysis using R/Bioconductor's DESeq2 software. The inputs to this analysis include the count matrix (same as with the PCA), but we also have options for defining the names of the contrasted groups and which samples we should contrast. Note that had you attempted to do this analysis before PCA or without first incorporating your CD4/monocytes annotations, you would not be able to execute the differential expression analysis; the dropdown input field for these inputs would be blank. This is because a differential expression analysis requires you to compare two observation sets (groups of samples). When we first started, we did not have this information so this would not be possible. Note that we have several options for our contrast groups. We could either choose to compare the groups that came from the PCA (setA, setB) or we could choose to compare the CD4 and monocyte annotations. We choose to contrast CD4 and monocytes below. Note that there is no logic that would prevent one from contrasting setB and monocytes, which would be comparing two sets of samples that are effectively the same. However, upon starting the analysis, the software would identify that the samples overlap and subsequently fail/stop the analysis. The output from the DESeq2 differential gene expression is presented as a table and boxplot. In the screenshot below, the boxplot is out of the viewing frame. However, by filtering the table, we can control which genes are shown in the boxplot directly below. By setting thresholds for the fold-change and adjusted p-value, we can filter the table down to a set of genes which show the strongest evidence for differential expression. If the size of the remaining genes is small enough (less than 500 genes, which may change), a button will activate which will allow you to define a custom \"feature set\". Below, we call this set \"topDGE\" to represent the \"top\" differentially expressed genes. Note that we set the filters to select genes with a very low adjusted p-value and a log fold-change less than 6 (which gives very strongly downregulated genes when comparing CD4 to monocytes) If you go to the metadata tab, you will see this new gene/feature set shown in the table. Plot an expression heatmap At this point, we have a list of our top differentially expressed genes. Perhaps we are interested in making a heatmap of these genes. We then head to the \"Plotting\" tab in the workspace and select \"expression heatmap\". For the expression data source, we choose the \"normalized\" expression that was one of the outputs of the differential expression analysis. We then choose \"topDGE\" as the genes/features to plot. After playing with some of the plotting parameters, we arrive at a reasonable heatmap. Note the relatively dark strip corresponding to \"sample_F\". As we suspected, this expression pattern matches much better with the monocytes, adding further evidence that the annotation file contained an error. Gene-set enrichment analysis Now, given that we have run a differential expression, we can dig further and start to look at potential biological mechanisms underpinning this data. We now run a gene-set enrichment analysis as implemented in the R/Bioconductor fGSEA package. One of the inputs to fGSEA is a table that allows the software to rank the genes. Typically, this is done as a combination of the log-fold change and p-value of differential expression. In principle, one could upload a file with this information directly, but most often we plug the output of the differential expression analysis into fGSEA. The output of the analysis is a table of the top pathways that may be affected the differentially expressed genes we previously identified. The details of fGSEA are outside the scope of this tutorial, but one can think of fGSEA as taking the ranked list of genes and overlaying them onto the database of biological pathways; if many of the genes in a particular pathway are differentially expressed, then it is reasonable to expect that the pathway would be different between the two cell types. This can start to reveal the biological meaning behind the differentially expressed genes. At this point, we can now choose one of the pathways and \"export\" the genes in that pathway to its own \"feature set\". By default, the set name is given as the name of the pathway from the fGSEA database, but you are free to change that. We leave it as the default here. Feature set operations Again, if we head to the metadata tab, we can see all the observation and feature sets, including this new set based on the IL-1 signaling pathway. We also see our \"topDGE\" set which was taken from the DESeq2 differential expression analysis. Perhaps we are interested in viewing those top downregulated differentially-expressed genes that are also in the IL-1 signaling pathway. Recall that fGSEA simply looks at how the full, ranked list of genes falls within the 62 genes in this pre-defined pathway. It doesn't mean that all 62 genes are differentially expressed or how they are affected (i.e. up- or downregulated). We can find out this intersection by selecting the two gene sets and performing a feature intersection by clicking on the button to \"Create set from intersection\". This ends up creating a new set of three genes. Thus, out of the 62 genes in the IL-1 signaling pathway, only three are strongly downregulated comparing CD4 versus . Boxplot of expressions As a final step in our analysis, let's look at the expression of those three significantly downregulated genes in the IL-1 pathway. Go to the \"Plotting\" tab again and this time choose \"expression boxplot\". Again, we select the normalized expressions, but this time we choose to display the three genes in our \"intersection set\". We arrive at the boxplot shown below. Again, if you hover over the individual points, we can see sample_F with gene expressions that more closely align with CD4 cell expression. Indeed, if you choose \"setA\" and \"setB\" to segregate the expressions, we see an improvement with no \"outliers\". If it weren't obvious before, we have definitively shown that sample_F was incorrectly annotated (see the final screenshot).","title":"Case study: RNA-Seq"},{"location":"rnaseq_case_study/#case-study-rna-seq","text":"","title":"Case study: RNA-Seq"},{"location":"rnaseq_case_study/#importing-files","text":"When we initially log-in, the file browser shows that you have no files: Upload from your local machine. Here we show the upload of the RNA-seq counts file, which looks like: Sample_A Sample_B ... Sample_T geneA 2 5 ... 54 geneB 101 102 ... 8 ... 56 51 ... 56 In addition to the prepared RNA-seq counts, we also have an \"annotation file\". This file gives sample metadata, or data about the samples themselves . In our example, the annotation file tells us that some of the samples were derived from cultures of monocytes while others came from CD4 cells. Additionally, it lists the sequencing \"batch\". We don't use that in this walkthrough, but one could use that variable to assess if there were any noticeable batch effects that we should adjust for. sample_id cell_type sequencing_run sample_D Monocytes run1 sample_C Monocytes run1 sample_S CD4 run1 ... ... ... sampleT CD4 run1","title":"Importing files"},{"location":"rnaseq_case_study/#defining-file-types","text":"After upload, we need to tell WebMeV what types of files these are. Note that the file name shows up in red text to alert us about this. We choose \"RNA-seq count matrix\" and \"Annotation file\" After setting the file types, WebMeV will attempt to parse and validate. If successful, you will see that the files are \"active\" without any warnings. As a double-check, we click on the \"eyeball\" icon to view a preview. Everything looks good. Generally, if something was incorrectly formatted, then the file will not pass validation.","title":"Defining file types"},{"location":"rnaseq_case_study/#creating-a-new-workspace","text":"Now that the files are uploaded and ready, we switch to the \"workspaces\" tab. Initially this is empty. Clicking the button opens a dialog where we enter the name of the workspace. Choose a simple, descriptive name (\"mev-demo\" in this case). Then click on the link to enter this new workspace","title":"Creating a new workspace"},{"location":"rnaseq_case_study/#adding-data-to-the-workspace","text":"After creating the workspace and clicking on the link, the workspace view is opened. Initially the workspace is empty. Note the empty table in the file browser. Your uploaded files still exist, but the table is empty since they have not been added to this particular workspace. Clicking on the \"add local data\" from above, we can select which files we want to import into this workspace.","title":"Adding data to the workspace"},{"location":"rnaseq_case_study/#running-analyses","text":"Navigate to the \"tools\" tab and look at the list of options for analysis tools. Below, we show how to initiate a principal component analysis (PCA). Next to each input field, the question mark icon will provide help and explanation for that analysis input. For a PCA analysis, we only require the input RNA-seq count matrix. There is also an optional input for executing the PCA on a subset of samples, but we leave that blank. As mentioned in the how-to guide, inputs that correspond to input files will be populated with all available files that match the expected type. Sometimes the input does not make sense for a given analysis, so the presence of a particular file as an input option does not mean that it is necessarily appropriate for that analysis . After filling everything out, we click \"Run\" and wait...","title":"Running analyses"},{"location":"rnaseq_case_study/#exploring-the-pca-output","text":"After the PCA completes, the interface will update to show the PCA projection plot. This is a \"simplified\" 2-dimensional representation of your data. Typically, samples with similar expression profiles or phenotypes will cluster together. Each data point represents a single sample. From the plot, we can see two general clusters- one on the left side of the plot and the other on the right. Since WebMeV is interactive, we can now use this PCA clustering to begin investigating these samples. We click the \"select points\" button (shown in light blue) to toggle the \"drag and draw\" functionality. With this, we are able to select the points in each cluster. Below, we show only a single cluster, but we do this for both the left and right clusters. Note that when the samples are selected, you are told that you have selected \"sample_A\", \"sample_B\", and so on. We then click the \"Save as a sample set\" button, which opens up a popup dialog (see below). That popup allows us to define a custom \"observation set\" and choose a color to represent that group of samples. Note that in WebMeV's terminology an \"observation\" is a sample and a \"feature\" is a gene. We use those more general terms to avoid confusion in situations where the data does not correspond to biological samples or specifically genes. We do this for both clusters and name them \"setA\" and \"setB\". If you navigate to the \"metadata\" tab, you can see that the table now shows both of these: You may now click on one of the set to see the samples corresponding to the set.","title":"Exploring the PCA output"},{"location":"rnaseq_case_study/#incorporating-annotations","text":"Recall that due to the sequencing experiment, we had prior knowledge of each cell type (monocytes, CD4). Given what we are dealing with two distinct cell types, we might expect that the two clusters we identified in the PCA directly correspond with these. If you go to the \"metadata\" tab and click on the \"incorporate annotations\" file, you will be presented with a popup where you may select from any annotation files that you have in your workspace. If you have not uploaded and set any files of this type, then this option will not be enabled. In our annotation file, we had two colums named \"cell_type\" and \"sequencing_run\". For the moment, we select \"cell_type\" as the annotation attribute since we are interested in how the PCA clusters correspond to the biological annotations. We can then choose to incoporate the information from this column. We select all to bring in all the information about cell types. After clicking \"add\" above, we now see that two new \"observation sets\" were created-- one for the monocytes and one for the CD4 cells, each with 10 samples in each. If we now select the \"visualization\" view to the top-right of the table, we can see a graphic representation of how the samples fall into the various groups. We immediately see that the samples in setA are almost equivalent to the samples annotated as monocytes. However , we see that \"sample_F\" does not seem to agree. Perhaps there was an error in your annotation file?? According to the PCA, sample_F showed an expression pattern more similar to your CD4 samples since it clustered with the other samples which all matched the CD4 annotation. Note that errors in annotations are more common than you think and it is important to do this type of investigation/QC. In public datasets, running a PCA using chrX/chrY expression can sometimes reveal expression patterns that are incongruous with the clinical annotation for sex.","title":"Incorporating annotations"},{"location":"rnaseq_case_study/#running-a-differential-expression-analysis","text":"We next run a differential expression analysis using R/Bioconductor's DESeq2 software. The inputs to this analysis include the count matrix (same as with the PCA), but we also have options for defining the names of the contrasted groups and which samples we should contrast. Note that had you attempted to do this analysis before PCA or without first incorporating your CD4/monocytes annotations, you would not be able to execute the differential expression analysis; the dropdown input field for these inputs would be blank. This is because a differential expression analysis requires you to compare two observation sets (groups of samples). When we first started, we did not have this information so this would not be possible. Note that we have several options for our contrast groups. We could either choose to compare the groups that came from the PCA (setA, setB) or we could choose to compare the CD4 and monocyte annotations. We choose to contrast CD4 and monocytes below. Note that there is no logic that would prevent one from contrasting setB and monocytes, which would be comparing two sets of samples that are effectively the same. However, upon starting the analysis, the software would identify that the samples overlap and subsequently fail/stop the analysis. The output from the DESeq2 differential gene expression is presented as a table and boxplot. In the screenshot below, the boxplot is out of the viewing frame. However, by filtering the table, we can control which genes are shown in the boxplot directly below. By setting thresholds for the fold-change and adjusted p-value, we can filter the table down to a set of genes which show the strongest evidence for differential expression. If the size of the remaining genes is small enough (less than 500 genes, which may change), a button will activate which will allow you to define a custom \"feature set\". Below, we call this set \"topDGE\" to represent the \"top\" differentially expressed genes. Note that we set the filters to select genes with a very low adjusted p-value and a log fold-change less than 6 (which gives very strongly downregulated genes when comparing CD4 to monocytes) If you go to the metadata tab, you will see this new gene/feature set shown in the table.","title":"Running a differential expression analysis"},{"location":"rnaseq_case_study/#plot-an-expression-heatmap","text":"At this point, we have a list of our top differentially expressed genes. Perhaps we are interested in making a heatmap of these genes. We then head to the \"Plotting\" tab in the workspace and select \"expression heatmap\". For the expression data source, we choose the \"normalized\" expression that was one of the outputs of the differential expression analysis. We then choose \"topDGE\" as the genes/features to plot. After playing with some of the plotting parameters, we arrive at a reasonable heatmap. Note the relatively dark strip corresponding to \"sample_F\". As we suspected, this expression pattern matches much better with the monocytes, adding further evidence that the annotation file contained an error.","title":"Plot an expression heatmap"},{"location":"rnaseq_case_study/#gene-set-enrichment-analysis","text":"Now, given that we have run a differential expression, we can dig further and start to look at potential biological mechanisms underpinning this data. We now run a gene-set enrichment analysis as implemented in the R/Bioconductor fGSEA package. One of the inputs to fGSEA is a table that allows the software to rank the genes. Typically, this is done as a combination of the log-fold change and p-value of differential expression. In principle, one could upload a file with this information directly, but most often we plug the output of the differential expression analysis into fGSEA. The output of the analysis is a table of the top pathways that may be affected the differentially expressed genes we previously identified. The details of fGSEA are outside the scope of this tutorial, but one can think of fGSEA as taking the ranked list of genes and overlaying them onto the database of biological pathways; if many of the genes in a particular pathway are differentially expressed, then it is reasonable to expect that the pathway would be different between the two cell types. This can start to reveal the biological meaning behind the differentially expressed genes. At this point, we can now choose one of the pathways and \"export\" the genes in that pathway to its own \"feature set\". By default, the set name is given as the name of the pathway from the fGSEA database, but you are free to change that. We leave it as the default here.","title":"Gene-set enrichment analysis"},{"location":"rnaseq_case_study/#feature-set-operations","text":"Again, if we head to the metadata tab, we can see all the observation and feature sets, including this new set based on the IL-1 signaling pathway. We also see our \"topDGE\" set which was taken from the DESeq2 differential expression analysis. Perhaps we are interested in viewing those top downregulated differentially-expressed genes that are also in the IL-1 signaling pathway. Recall that fGSEA simply looks at how the full, ranked list of genes falls within the 62 genes in this pre-defined pathway. It doesn't mean that all 62 genes are differentially expressed or how they are affected (i.e. up- or downregulated). We can find out this intersection by selecting the two gene sets and performing a feature intersection by clicking on the button to \"Create set from intersection\". This ends up creating a new set of three genes. Thus, out of the 62 genes in the IL-1 signaling pathway, only three are strongly downregulated comparing CD4 versus .","title":"Feature set operations"},{"location":"rnaseq_case_study/#boxplot-of-expressions","text":"As a final step in our analysis, let's look at the expression of those three significantly downregulated genes in the IL-1 pathway. Go to the \"Plotting\" tab again and this time choose \"expression boxplot\". Again, we select the normalized expressions, but this time we choose to display the three genes in our \"intersection set\". We arrive at the boxplot shown below. Again, if you hover over the individual points, we can see sample_F with gene expressions that more closely align with CD4 cell expression. Indeed, if you choose \"setA\" and \"setB\" to segregate the expressions, we see an improvement with no \"outliers\". If it weren't obvious before, we have definitively shown that sample_F was incorrectly annotated (see the final screenshot).","title":"Boxplot of expressions"},{"location":"roadmap/","text":"WebMeV Development Roadmap WebMeV's architecture permits rapid development cycles, as new analyses can be developed (mostly) independently of our application. With the analysis code and environment specified, we require only a couple extra files to include the new module into WebMeV. Short-term development plans (summer/fall 2021) include: Inclusion of public data repositories (e.g. TCGA, TARGET) and a browsable public data interface Additional SCTK modules, including QC Network-medicine analyses such as those avaible in the Quackenbush lab's netZoo repositories https://github.com/netZoo ...and, of course, bug fixes and improvements as needed!","title":"Roadmap"},{"location":"roadmap/#webmev-development-roadmap","text":"WebMeV's architecture permits rapid development cycles, as new analyses can be developed (mostly) independently of our application. With the analysis code and environment specified, we require only a couple extra files to include the new module into WebMeV. Short-term development plans (summer/fall 2021) include: Inclusion of public data repositories (e.g. TCGA, TARGET) and a browsable public data interface Additional SCTK modules, including QC Network-medicine analyses such as those avaible in the Quackenbush lab's netZoo repositories https://github.com/netZoo ...and, of course, bug fixes and improvements as needed!","title":"WebMeV Development Roadmap"},{"location":"workspaces/","text":"About workspaces To help with managing and organizing multiple types of analyses, we allow users to create \"workspaces\". All your analysis is performed within the context of a workspace. While you are not required to use more than one workspace, we encourage users to separate different types of analyses if they concern fundamentally different data. For example, one workspace might contain analyses related to an RNA-seq experiment performed on a cell-line while another workspace might contain analyses pertaining to an unrelated patient-derived xenograft mouse experiment. Note that a single file can be \"shared\" across multiple workspaces. Sincee we don't modify your files, the file content will be the same in each of the workspaces and will remain that way.","title":"Workspaces"},{"location":"workspaces/#about-workspaces","text":"To help with managing and organizing multiple types of analyses, we allow users to create \"workspaces\". All your analysis is performed within the context of a workspace. While you are not required to use more than one workspace, we encourage users to separate different types of analyses if they concern fundamentally different data. For example, one workspace might contain analyses related to an RNA-seq experiment performed on a cell-line while another workspace might contain analyses pertaining to an unrelated patient-derived xenograft mouse experiment. Note that a single file can be \"shared\" across multiple workspaces. Sincee we don't modify your files, the file content will be the same in each of the workspaces and will remain that way.","title":"About workspaces"}]}